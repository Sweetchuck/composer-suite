<?php

declare(strict_types = 1);

namespace Sweetchuck\ComposerSuite\Test\Unit\Composer\Command;

use Composer\Console\Application;
use Sweetchuck\ComposerSuite\Composer\Command\GenerateCommand;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\Filesystem\Filesystem;

/**
 * @covers \Sweetchuck\ComposerSuite\Composer\Command\GenerateCommand<extended>
 */
class GenerateTest extends CommandTestBase
{

    /**
     * @var array<string>
     */
    protected array $fsEntriesToRemove = [];

    protected Filesystem $fs;

    protected function _before()
    {
        parent::_before();
        $this->fs = new Filesystem();
    }

    /**
     * @return void
     */
    protected function _after()
    {
        $this->fs->remove($this->fsEntriesToRemove);
        parent::_after();
    }

    protected function createTmpDir(): string
    {
        $name = $this->fs->tempnam(sys_get_temp_dir(), 'composer-suite-');
        $this->fs->remove($name);
        $this->fs->mkdir($name);
        $this->fsEntriesToRemove[] = $name;

        return $name;
    }

    public function testSuiteGenerateSuccess()
    {
        // In the background Composer uses \realpath(), which doesn't work
        // together with vfs://.
        $projectRoot = $this->createTmpDir();
        $this->fs->dumpFile(
            "$projectRoot/composer.json",
            json_encode([
                'require' => [
                    'a/b' => '^1.0',
                ],
                'extra' => [
                    'composer-suite' => [
                        'one' => [
                            'actions' => [
                                [
                                    'type' => 'replaceRecursive',
                                    'config' => [
                                        'parents' => [],
                                        'items' => [
                                            'require' => [
                                                'a/b' => '1.x-dev',
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'two' => [
                            'actions' => [
                                [
                                    'type' => 'replaceRecursive',
                                    'config' => [
                                        'parents' => [],
                                        'items' => [
                                            'require' => [
                                                'a/b' => '1.x-dev',
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                        'three' => [
                            'actions' => [
                                [
                                    'type' => 'replaceRecursive',
                                    'config' => [
                                        'parents' => [],
                                        'items' => [
                                            'require' => [
                                                'a/b' => '1.x-dev',
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ])
        );

        putenv('COMPOSER=' . "$projectRoot/composer.json");

        $application = new Application();
        $command = new GenerateCommand('suite:generate');
        $command->setApplication($application);
        $commandTester = new CommandTester($command);
        $commandTester->execute(
            [],
            [
                'decorated' => false,
                'verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE,
            ],
        );

        // @todo Somehow get the output, and check its content.
        $expectedExitCode = 0;
        $this->tester->assertSame(
            $expectedExitCode,
            $commandTester->getStatusCode(),
            "exit code $expectedExitCode",
        );

        $comment = '"DO NOT EDIT THIS FILE. Content of this file can be overwritten by the `suite:generate` command."';

        $this->tester->assertFileExists("$projectRoot/composer.one.json");
        $this->tester->assertStringEqualsFile(
            "$projectRoot/composer.one.json",
            implode("\n", [
                '{',
                '    "_comment": [',
                "        $comment",
                '    ],',
                '    "require": {',
                '        "a/b": "1.x-dev"',
                '    },',
                '    "extra": []',
                '}',
                '',
            ]),
        );
        $this->tester->assertFileExists("$projectRoot/composer.two.json");
        $this->tester->assertFileExists("$projectRoot/composer.three.json");
    }

    public function testSuiteGenerateFail()
    {
        // In the background Composer uses \realpath(), which doesn't work
        // together with vfs://.
        $projectRoot = $this->createTmpDir();
        $this->fs->dumpFile(
            "$projectRoot/composer.json",
            json_encode([
                'require' => [
                    'a/b' => '^1.0',
                ],
                'extra' => [
                    'composer-suite' => [
                        'one' => [
                            'actions' => [
                                [
                                    'type' => 'sortNormal',
                                    'config' => [
                                        'parents' => [],
                                        'function' => 'not_valid',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ])
        );

        putenv('COMPOSER=' . "$projectRoot/composer.json");

        $application = new Application();
        $command = new GenerateCommand('suite:generate');
        $command->setApplication($application);
        $commandTester = new CommandTester($command);
        $commandTester->execute(
            [],
            [
                'verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE,
            ],
        );

        $expectedExitCode = 1;
        $this->tester->assertSame(
            $expectedExitCode,
            $commandTester->getStatusCode(),
            "exit code $expectedExitCode",
        );

        $this->tester->assertFileDoesNotExist("$projectRoot/composer.one.json");
    }
}
