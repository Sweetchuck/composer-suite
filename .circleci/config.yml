
version: 2.1

orbs:
    codecov: 'codecov/codecov@3.0.0'

.env_app: &env_app
    SHELL: '/bin/bash'

.env_composer: &env_composer
    COMPOSER_NO_INTERACTION: '1'
    COMPOSER_MEMORY_LIMIT: '-1'
    COMPOSER_DISABLE_XDEBUG_WARN: '1'

executors:
    php_min:
        resource_class: 'small'
        environment:
            <<: *env_app
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'cimg/php:7.4'
    php_plus1:
        resource_class: 'small'
        environment:
            <<: *env_app
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'cimg/php:8.0'
    php_plus2:
        resource_class: 'small'
        environment:
            <<: *env_app
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'cimg/php:8.1'

commands:
    install_php_extension_pcov:
        description: 'Install PCOV PHP extension'
        steps:
            -
                run:
                    name: 'Install PCOV PHP extension - pecl install pcov'
                    command: |
                        sudo pecl install pcov
                        php -v
                        php -m
                        if php -m | grep pcov ; then
                            exit 0
                        fi

                        scanDir="$(php -i | grep --color=never --only-matching --perl-regexp '(?<=^Scan this dir for additional \.ini files => ).+')"
                        echo 'extension=pcov' | sudo tee "${scanDir}/pcov.ini"
                        php -m

    composer_install:
        description: 'Install Composer dependencies with cache restore and save'
        steps:
            -
                restore_cache:
                    name: 'Composer - cache restore'
                    keys:
                        - 'composer-{{ checksum "./composer.lock" }}-2'

            -
                run:
                    name: 'Composer - install'
                    command: >
                        composer install --no-progress --ansi

            -
                save_cache:
                    name: 'Composer - cache save'
                    key: 'composer-{{ checksum "./composer.lock" }}-2'
                    paths:
                        - '~/.composer/cache/'
                        - '~/.cache/composer/'


    lint:
        description: 'Run linters'
        steps:
            -
                run:
                    name: 'Run linters'
                    command: '"$(composer config bin-dir)/robo" --ansi lint'

    test:
        description: 'Run tests'
        steps:
            -
                run:
                    name: 'Codeception - unit'
                    command: '"$(composer config bin-dir)/robo" --ansi test unit'
            -   codecov/upload:
                    flags: 'unit'
                    file: './tests/_output/machine/coverage/unit/coverage.xml'
            -
                run:
                    name: 'Codeception - acceptance'
                    command: '"$(composer config bin-dir)/robo" --ansi test acceptance'
            -   codecov/upload:
                    flags: 'unit'
                    file: './tests/_output/machine/coverage/acceptance/coverage.xml'
            -   store_test_results:
                    name: 'Store unit test results'
                    path: './tests/_output/machine/junit'

jobs:
    build:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'composer_install'
    lint:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'composer_install'
            - 'lint'
    test:
        parameters:
            executor:
                type: 'string'
        executor: '<<parameters.executor>>'
        steps:
            - 'checkout'
            - 'install_php_extension_pcov'
            - 'composer_install'
            - 'test'

workflows:
    lint_and_test:
        jobs:
            -
                build: {}
            -
                lint:
                    requires:
                        - 'build'
            -
                test:
                    name: 'test_<<matrix.executor>>'
                    requires:
                        - 'build'
                    matrix:
                        parameters:
                            executor:
                                - 'php_min'
                                - 'php_plus1'
                                - 'php_plus2'
